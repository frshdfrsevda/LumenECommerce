// <auto-generated />
using System;
using CetinFarshidfar.JewelryECommerce.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CetinFarshidfar.JewelryECommerce.DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250119203340_up_data_on_productimages")]
    partial class up_data_on_productimages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "0a804f8f-fdb0-4797-8fa2-a2ffc5dfadfb",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("46c31bb2-9d7c-4424-9cc2-84892b055c43"),
                            ConcurrencyStamp = "d9a92ba9-af7a-48b2-a59d-9f284ff487c8",
                            Name = "SupportMod",
                            NormalizedName = "SUPPORTMOD"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "43ee203b-b338-44d4-a6a9-8e7a529ccdfd",
                            Name = "CompanyMod",
                            NormalizedName = "COMPANYMOD"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "e9804891-d688-4ae2-a136-7fe5315da1f3",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ead3165d-0386-43a9-9ef9-06b41b49afed",
                            CreatedTime = new DateTime(2025, 1, 19, 23, 33, 38, 586, DateTimeKind.Local).AddTicks(740),
                            Email = "wm_cetin@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Muhammed Emin Çetin",
                            LockoutEnabled = false,
                            NormalizedEmail = "WM_CETIN@LUMEN.COM",
                            NormalizedUserName = "WM_CETIN@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPe6fuPcpO2P77+m0ug102Ecq4KwOMUhh+Bzg7bC+NuSCRDQNXAhpGKdaSDvTOJ2uA==",
                            PhoneNumber = "+905356236286",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ca5cd1a1-14bb-4714-b852-5be2deb49d06",
                            TwoFactorEnabled = false,
                            UserName = "wm_cetin@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdeff58f-7f39-410f-8234-6dbbc7d712ed",
                            CreatedTime = new DateTime(2025, 1, 19, 23, 33, 38, 808, DateTimeKind.Local).AddTicks(9674),
                            Email = "sup_farshidfarsevda@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Sevda Farshidfar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUP_FARSHIDFARSEVDA@LUMEN.COM",
                            NormalizedUserName = "SUP_FARSHIDFARSEVDA@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECyOEaKNZmUKX9lgtxl1esr1tcxcRCDkXBp1L9fW3kFHJvPb1NCYhH3Ri93IWtZpZQ==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "64df194d-68c8-41c0-bee4-6e9677615c25",
                            TwoFactorEnabled = false,
                            UserName = "sup_farshidfarsevda@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("5f3ed54b-6c06-4a22-b2e1-badd8e0d285b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf14d602-7f65-475f-963f-5d50c33e95db",
                            CreatedTime = new DateTime(2025, 1, 19, 23, 33, 38, 990, DateTimeKind.Local).AddTicks(1630),
                            Email = "com_rizasarraf@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Rıza Sarraf",
                            LockoutEnabled = false,
                            NormalizedEmail = "COM_RIZASARRAF@LUMEN.COM",
                            NormalizedUserName = "COM_RIZASARRAF@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMDRTBTWKFyIne4Ere7sFwaB4mLRv6ariUHEBJfovTamtiQNcDbeV/0IIV1CGIaIBQ==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b90bde60-16bd-41f6-b32a-950e3d53a1e6",
                            TwoFactorEnabled = false,
                            UserName = "com_rizasarraf@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("a18dc8f2-defd-4233-9a37-8d12564e00bc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90884f9a-22e9-4d98-be52-0bebc8b24b9e",
                            CreatedTime = new DateTime(2025, 1, 19, 23, 33, 39, 106, DateTimeKind.Local).AddTicks(2425),
                            Email = "com_alialtinkafa@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Ali Altınkafa",
                            LockoutEnabled = false,
                            NormalizedEmail = "COM_ALIALTINKAFA@LUMEN.COM",
                            NormalizedUserName = "COM_ALIALTINKAFA@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECt9O4D62aqx+yJMoO+j27c7GNR/7iJmte9Z9YRSMX4gS3lGAvB2PnVPPhOTWsleOw==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "22e897a1-0182-44b9-9b41-cd8d36e0685a",
                            TwoFactorEnabled = false,
                            UserName = "com_alialtinkafa@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("e6def87b-c734-4a10-a0be-ced4a542d54c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7b2bb80-aa23-45bd-81a0-10ff077e6b4e",
                            CreatedTime = new DateTime(2025, 1, 19, 23, 33, 39, 222, DateTimeKind.Local).AddTicks(5196),
                            Email = "mami22cetin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Fatma Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAMI22CETIN@GMAIL.COM",
                            NormalizedUserName = "MAMI22CETIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC3P251J3qJa9ka9zK6KpcudHKsDATlSXvNJ6S1RnHwCam3DU392sd41MIpNTY2/eQ==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "42b32583-6c29-4d57-9cd8-9fed79e43037",
                            TwoFactorEnabled = false,
                            UserName = "mami22cetin@gmail.com"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("46c31bb2-9d7c-4424-9cc2-84892b055c43")
                        },
                        new
                        {
                            UserId = new Guid("5f3ed54b-6c06-4a22-b2e1-badd8e0d285b"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        },
                        new
                        {
                            UserId = new Guid("a18dc8f2-defd-4233-9a37-8d12564e00bc"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        },
                        new
                        {
                            UserId = new Guid("e6def87b-c734-4a10-a0be-ced4a542d54c"),
                            RoleId = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb")
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c12817dd-6b83-46e0-8020-54095e11ed5b"),
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 570, DateTimeKind.Local).AddTicks(9566),
                            IsDeleted = false,
                            Name = "Bileklikler"
                        },
                        new
                        {
                            Id = new Guid("03ce06ea-9051-4e0a-b444-2d19cdebd94b"),
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 570, DateTimeKind.Local).AddTicks(9614),
                            IsDeleted = false,
                            Name = "Altın Bileklikler",
                            ParentCategoryId = new Guid("c12817dd-6b83-46e0-8020-54095e11ed5b")
                        },
                        new
                        {
                            Id = new Guid("f0cbfc44-2fa5-4e8c-a6cc-e508b9f57842"),
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 570, DateTimeKind.Local).AddTicks(9631),
                            IsDeleted = false,
                            Name = "Taşlı Bileklikler",
                            ParentCategoryId = new Guid("c12817dd-6b83-46e0-8020-54095e11ed5b")
                        },
                        new
                        {
                            Id = new Guid("bc969756-0930-4ee7-be16-a5ae1a83213c"),
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 570, DateTimeKind.Local).AddTicks(9639),
                            IsDeleted = false,
                            Name = "Kolyeler"
                        },
                        new
                        {
                            Id = new Guid("d78bf8de-9d79-4ba0-9b62-7252c9738fdb"),
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 570, DateTimeKind.Local).AddTicks(9644),
                            IsDeleted = false,
                            Name = "İnci Kolyeler",
                            ParentCategoryId = new Guid("bc969756-0930-4ee7-be16-a5ae1a83213c")
                        },
                        new
                        {
                            Id = new Guid("91904860-0d46-479b-b423-e80e4d11207b"),
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 570, DateTimeKind.Local).AddTicks(9651),
                            IsDeleted = false,
                            Name = "Altın Kolyeler",
                            ParentCategoryId = new Guid("bc969756-0930-4ee7-be16-a5ae1a83213c")
                        },
                        new
                        {
                            Id = new Guid("64f6d36f-8f31-4850-b8ad-9f36f1e730ac"),
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 570, DateTimeKind.Local).AddTicks(9672),
                            IsDeleted = false,
                            Name = "Pırlanta Kolyeler",
                            ParentCategoryId = new Guid("bc969756-0930-4ee7-be16-a5ae1a83213c")
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CoFounderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoFounderId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("130ab18e-e4b8-4769-ac84-4bb8c4153f4c"),
                            Address = "1920 DR MARTIN L KING JR BLVD",
                            City = "New York",
                            CoFounderId = new Guid("5f3ed54b-6c06-4a22-b2e1-badd8e0d285b"),
                            Country = "USA",
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 571, DateTimeKind.Local).AddTicks(6440),
                            Description = "We are a premier jewelry company dedicated to creating exquisite pieces that embody elegance and timeless beauty. Our collection features meticulously crafted jewelry designed to make every moment sparkle. From classic designs to contemporary masterpieces, each piece is a testament to our commitment to quality and craftsmanship.",
                            Email = "sarraf@jewelry.com",
                            FoundedDate = new DateTime(1985, 4, 10, 0, 51, 29, 0, DateTimeKind.Unspecified),
                            Industry = "Jewelry",
                            IsDeleted = false,
                            Name = "Sarraf Jewelry",
                            NumberOfEmployees = 622,
                            Phone = "555-5971-3152",
                            PostalCode = "10453-4416",
                            State = "BRONX"
                        },
                        new
                        {
                            Id = new Guid("0b5253c9-4495-4948-946d-c2fdbce74476"),
                            Address = "Davutpaşa mh. 62.sk No:67",
                            City = "İstanbul",
                            CoFounderId = new Guid("a18dc8f2-defd-4233-9a37-8d12564e00bc"),
                            Country = "Türkiye",
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 571, DateTimeKind.Local).AddTicks(6556),
                            Description = "Şirketimiz, zarafet ve zamansız güzelliği temsil eden muhteşem mücevherler yaratmaya adanmıştır. Koleksiyonumuz, her anınızı parlatmak için özenle tasarlanmış mücevherlerden oluşmaktadır. Klasik tasarımlardan modern başyapıtlara kadar her parça, kalite ve işçilik konusundaki bağlılığımızın bir kanıtıdır.\r\n",
                            Email = "altinkafa@mucevherat.com",
                            FoundedDate = new DateTime(2021, 10, 24, 11, 42, 21, 0, DateTimeKind.Unspecified),
                            Industry = "Mücevherat",
                            IsDeleted = false,
                            Name = "AltınKafa Mücevherat",
                            NumberOfEmployees = 574,
                            Phone = "212-202-3030",
                            PostalCode = "34230",
                            State = "Esenler"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CompanyApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManagerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CompanyApplications");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<int>("EstimatedShippingTime")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpecialProduction")
                        .HasColumnType("bit");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("842614f7-d402-4324-9a58-40166f4d9bb7"),
                            CategoryId = new Guid("03ce06ea-9051-4e0a-b444-2d19cdebd94b"),
                            CompanyId = new Guid("130ab18e-e4b8-4769-ac84-4bb8c4153f4c"),
                            CreatedBy = "com_rizasarraf@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 574, DateTimeKind.Local).AddTicks(3007),
                            EstimatedShippingTime = 3,
                            IsDeleted = false,
                            Name = "Altın Kelepçe, 24 Ayar 25 Gr Altın",
                            Price = 80000.00m,
                            ProductCode = "P001",
                            SpecialProduction = false,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("c04595e2-2967-41ec-b7ab-d84d10c11ca0"),
                            CategoryId = new Guid("64f6d36f-8f31-4850-b8ad-9f36f1e730ac"),
                            CompanyId = new Guid("130ab18e-e4b8-4769-ac84-4bb8c4153f4c"),
                            CreatedBy = "com_rizasarraf@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 19, 23, 33, 38, 574, DateTimeKind.Local).AddTicks(3049),
                            DiscountPercentage = 4,
                            EstimatedShippingTime = 3,
                            IsDeleted = false,
                            Name = "Pırlanta Kolye, 0.33 Karat Özel Tasarım",
                            Price = 20000.00m,
                            ProductCode = "P002",
                            SpecialProduction = true,
                            StockQuantity = 5
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.ProductDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductDescriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("842614f7-d402-4324-9a58-40166f4d9bb7"),
                            Content = "wm_cetin@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("c04595e2-2967-41ec-b7ab-d84d10c11ca0"),
                            Content = "wm_cetin@lumen.com"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Queue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Path = "/img/products/842614F7-D402-4324-9A58-40166F4D9BB7/EBE9E0F2-49E4-4D8B-B7C5-5A06AC25C220.jpg",
                            ProductId = new Guid("842614f7-d402-4324-9a58-40166f4d9bb7"),
                            Queue = 1
                        },
                        new
                        {
                            Id = 2,
                            Path = "/img/products/842614F7-D402-4324-9A58-40166F4D9BB7/7FB73879-9575-4B34-AC4B-550FE2A7A212.jpg",
                            ProductId = new Guid("842614f7-d402-4324-9a58-40166f4d9bb7"),
                            Queue = 2
                        },
                        new
                        {
                            Id = 3,
                            Path = "/img/products/C04595E2-2967-41EC-B7AB-D84D10C11CA0/2C2B225A-B9FC-411B-99E5-AB6088EAF2F4.jpg",
                            ProductId = new Guid("c04595e2-2967-41ec-b7ab-d84d10c11ca0")
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = new Guid("842614f7-d402-4324-9a58-40166f4d9bb7"),
                            TagId = 2
                        },
                        new
                        {
                            Id = 2,
                            ProductId = new Guid("842614f7-d402-4324-9a58-40166f4d9bb7"),
                            TagId = 7
                        },
                        new
                        {
                            Id = 3,
                            ProductId = new Guid("c04595e2-2967-41ec-b7ab-d84d10c11ca0"),
                            TagId = 11
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentTagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Malzeme"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Altın",
                            ParentTagId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gümüş",
                            ParentTagId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Elmas",
                            ParentTagId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Zümrüt",
                            ParentTagId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Renk"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sarı Altın",
                            ParentTagId = 6
                        },
                        new
                        {
                            Id = 8,
                            Name = "Beyaz Altın",
                            ParentTagId = 6
                        },
                        new
                        {
                            Id = 9,
                            Name = "Rose Altın",
                            ParentTagId = 6
                        },
                        new
                        {
                            Id = 10,
                            Name = "Tarz"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Modern",
                            ParentTagId = 10
                        },
                        new
                        {
                            Id = 12,
                            Name = "Klasik",
                            ParentTagId = 10
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vintage",
                            ParentTagId = 10
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRoleClaim", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserClaim", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserLogin", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserRole", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserToken", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Category", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Company", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", "CoFounder")
                        .WithMany()
                        .HasForeignKey("CoFounderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoFounder");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CustomerAddress", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Product", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.ProductDescription", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Product", "Product")
                        .WithOne("Description")
                        .HasForeignKey("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.ProductDescription", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.ProductImage", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.ProductTag", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Tag", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Tag", "ParentTag")
                        .WithMany("ChildTags")
                        .HasForeignKey("ParentTagId");

                    b.Navigation("ParentTag");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Product", b =>
                {
                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Tag", b =>
                {
                    b.Navigation("ChildTags");

                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
