// <auto-generated />
using System;
using CetinFarshidfar.JewelryECommerce.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CetinFarshidfar.JewelryECommerce.DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250117164014_up_tbl_appuser_addCreatedTimeProperty")]
    partial class up_tbl_appuser_addCreatedTimeProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "2ba17a4f-c2b8-4b0c-861d-a7a014caea60",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("46c31bb2-9d7c-4424-9cc2-84892b055c43"),
                            ConcurrencyStamp = "f646c8f0-5f3e-403e-af7b-e6c0f04a1761",
                            Name = "SupportMod",
                            NormalizedName = "SUPPORTMOD"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "df7709e6-0165-4713-a097-fe378ada8d81",
                            Name = "CompanyMod",
                            NormalizedName = "COMPANYMOD"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "3e01a50a-a0d7-4440-bbf0-9f1b3dcb52d5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "735a97cc-77b1-46e4-b73d-3ecc63876dd4",
                            CreatedTime = new DateTime(2025, 1, 17, 19, 40, 13, 223, DateTimeKind.Local).AddTicks(9920),
                            Email = "wm_cetin@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Muhammed Emin Çetin",
                            LockoutEnabled = false,
                            NormalizedEmail = "WM_CETIN@LUMEN.COM",
                            NormalizedUserName = "WM_CETIN@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDrrUNSt4AxGjbhHXWWRCTcBMlgb5rDuABQcVGTzF7jtlrZBOtvGCHK0WCqTb1g6HA==",
                            PhoneNumber = "+905356236286",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8ccd3c03-e62c-4741-9fbb-540e020890c8",
                            TwoFactorEnabled = false,
                            UserName = "wm_cetin@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab09a5f0-539e-4eba-b649-bdcd6cd33419",
                            CreatedTime = new DateTime(2025, 1, 17, 19, 40, 13, 291, DateTimeKind.Local).AddTicks(6561),
                            Email = "sup_farshidfarsevda@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Sevda Farshidfar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUP_FARSHIDFARSEVDA@LUMEN.COM",
                            NormalizedUserName = "SUP_FARSHIDFARSEVDA@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBTc0knuAqqxpNxRo5n2Li5OzTybmNxVzipi2MEq5OEYYLPZRSyIz2lXqUGuMQLSAA==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "016c0061-c48f-4d74-9a56-61e8c2a96478",
                            TwoFactorEnabled = false,
                            UserName = "sup_farshidfarsevda@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("5f3ed54b-6c06-4a22-b2e1-badd8e0d285b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a8ae674-99c1-4cdd-b728-6a19487d308d",
                            CreatedTime = new DateTime(2025, 1, 17, 19, 40, 13, 354, DateTimeKind.Local).AddTicks(2949),
                            Email = "com_rizasarraf@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Rıza Sarraf",
                            LockoutEnabled = false,
                            NormalizedEmail = "COM_RIZASARRAF@LUMEN.COM",
                            NormalizedUserName = "COM_RIZASARRAF@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECQRs8wxrNPkYgkIMiLRLJ1MWhYhGYZNIDY+peM3chgJaHbd4HCT+BdtoCeu2EwS3Q==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "be9577ef-53a6-455a-8c92-6483ccf13934",
                            TwoFactorEnabled = false,
                            UserName = "com_rizasarraf@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("a18dc8f2-defd-4233-9a37-8d12564e00bc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcdd0b97-de31-42ec-a9c8-934533863338",
                            CreatedTime = new DateTime(2025, 1, 17, 19, 40, 13, 421, DateTimeKind.Local).AddTicks(8478),
                            Email = "com_alialtinkafa@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Ali Altınkafa",
                            LockoutEnabled = false,
                            NormalizedEmail = "COM_ALIALTINKAFA@LUMEN.COM",
                            NormalizedUserName = "COM_ALIALTINKAFA@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN7HH7r4jqZnKYXWH5RJPtwpIQ67v23ZQqmS3rhyLPzfHlubD6skgZjNw043UMzMIw==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "196396ee-ae6b-4558-a7a9-2f815be83206",
                            TwoFactorEnabled = false,
                            UserName = "com_alialtinkafa@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("e6def87b-c734-4a10-a0be-ced4a542d54c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "828443e7-28d6-4c10-86b4-ca9fd2fb0ac2",
                            CreatedTime = new DateTime(2025, 1, 17, 19, 40, 13, 499, DateTimeKind.Local).AddTicks(1451),
                            Email = "mami22cetin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Fatma Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAMI22CETIN@GMAIL.COM",
                            NormalizedUserName = "MAMI22CETIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqKxf3oOSN+NfyZCpGCX3g7EgZpFAwft6j92BDoYlO5W+H/3OppvwMX8oe+vrHJEg==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6300058b-1dcd-4433-a917-502a9e400bc8",
                            TwoFactorEnabled = false,
                            UserName = "mami22cetin@gmail.com"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("46c31bb2-9d7c-4424-9cc2-84892b055c43")
                        },
                        new
                        {
                            UserId = new Guid("5f3ed54b-6c06-4a22-b2e1-badd8e0d285b"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        },
                        new
                        {
                            UserId = new Guid("a18dc8f2-defd-4233-9a37-8d12564e00bc"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        },
                        new
                        {
                            UserId = new Guid("e6def87b-c734-4a10-a0be-ced4a542d54c"),
                            RoleId = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb")
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CoFounderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoFounderId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c10b5da-da38-40bf-acad-0f51ac207828"),
                            Address = "1920 DR MARTIN L KING JR BLVD",
                            City = "New York",
                            CoFounderId = new Guid("5f3ed54b-6c06-4a22-b2e1-badd8e0d285b"),
                            Country = "USA",
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 17, 19, 40, 13, 220, DateTimeKind.Local).AddTicks(3989),
                            Description = "We are a premier jewelry company dedicated to creating exquisite pieces that embody elegance and timeless beauty. Our collection features meticulously crafted jewelry designed to make every moment sparkle. From classic designs to contemporary masterpieces, each piece is a testament to our commitment to quality and craftsmanship.",
                            Email = "sarraf@jewelry.com",
                            FoundedDate = new DateTime(1907, 11, 27, 0, 53, 11, 0, DateTimeKind.Unspecified),
                            Industry = "Jewelry",
                            IsDeleted = false,
                            Name = "Sarraf Jewelry",
                            NumberOfEmployees = 296,
                            Phone = "555-5971-3152",
                            PostalCode = "10453-4416",
                            State = "BRONX"
                        },
                        new
                        {
                            Id = new Guid("c9393b4a-ffee-4d6e-95ce-009e5c9ecd9b"),
                            Address = "Davutpaşa mh. 62.sk No:67",
                            City = "İstanbul",
                            CoFounderId = new Guid("a18dc8f2-defd-4233-9a37-8d12564e00bc"),
                            Country = "Türkiye",
                            CreatedBy = "wm_cetin@lumen.com",
                            CreatedDate = new DateTime(2025, 1, 17, 19, 40, 13, 220, DateTimeKind.Local).AddTicks(4066),
                            Description = "Şirketimiz, zarafet ve zamansız güzelliği temsil eden muhteşem mücevherler yaratmaya adanmıştır. Koleksiyonumuz, her anınızı parlatmak için özenle tasarlanmış mücevherlerden oluşmaktadır. Klasik tasarımlardan modern başyapıtlara kadar her parça, kalite ve işçilik konusundaki bağlılığımızın bir kanıtıdır.\r\n",
                            Email = "altinkafa@mucevherat.com",
                            FoundedDate = new DateTime(1926, 4, 1, 4, 3, 36, 0, DateTimeKind.Unspecified),
                            Industry = "Mücevherat",
                            IsDeleted = false,
                            Name = "AltınKafa Mücevherat",
                            NumberOfEmployees = 81,
                            Phone = "212-202-3030",
                            PostalCode = "34230",
                            State = "Esenler"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CompanyApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManagerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CompanyApplications");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRoleClaim", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserClaim", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserLogin", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserRole", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserToken", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.Company", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", "CoFounder")
                        .WithMany()
                        .HasForeignKey("CoFounderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoFounder");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CustomerAddress", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });
#pragma warning restore 612, 618
        }
    }
}
