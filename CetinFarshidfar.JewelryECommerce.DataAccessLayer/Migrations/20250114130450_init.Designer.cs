// <auto-generated />
using System;
using CetinFarshidfar.JewelryECommerce.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CetinFarshidfar.JewelryECommerce.DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250114130450_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e"),
                            ConcurrencyStamp = "1f380abf-06d0-476c-9892-87aa3cd0fda5",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("46c31bb2-9d7c-4424-9cc2-84892b055c43"),
                            ConcurrencyStamp = "31d94694-9af3-487e-8a2f-c6ec8a41bcfa",
                            Name = "SupportMod",
                            NormalizedName = "SUPPORTMOD"
                        },
                        new
                        {
                            Id = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4"),
                            ConcurrencyStamp = "f05f8102-afa8-47fc-a29f-60a8c35f4b01",
                            Name = "CompanyMod",
                            NormalizedName = "COMPANYMOD"
                        },
                        new
                        {
                            Id = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb"),
                            ConcurrencyStamp = "7ca357a1-bdd2-439e-92bb-411de832bec3",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33436cf3-e755-4b8c-85a1-75b4ac91c5c6",
                            Email = "wm_cetin@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Muhammed Emin Çetin",
                            LockoutEnabled = false,
                            NormalizedEmail = "WM_CETIN@LUMEN.COM",
                            NormalizedUserName = "WM_CETIN@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7f06/PCwgmC9L65wSOX2oDy/dYxwQNzPN/npkiOOAvhbdzGQyOtf9zC5Uj/HkRCw==",
                            PhoneNumber = "+905356236286",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "44c9da22-912b-451e-ae66-cccf749b5160",
                            TwoFactorEnabled = false,
                            UserName = "wm_cetin@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54d025cd-5015-4148-9430-aec779fff938",
                            Email = "sup_farshidfarsevda@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Sevda Farshidfar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUP_FARSHIDFARSEVDA@LUMEN.COM",
                            NormalizedUserName = "SUP_FARSHIDFARSEVDA@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHjJZk0g+bGlhisDsqB7lg+qKdKXehZJW+AKiAx/Oe86rkwKlQDazyofT4e5QjiSXQ==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2a8075c0-17b5-4ee0-b436-bd7e254253b4",
                            TwoFactorEnabled = false,
                            UserName = "sup_farshidfarsevda@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("5f3ed54b-6c06-4a22-b2e1-badd8e0d285b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "731bf447-1a25-4283-9533-ac16fade4746",
                            Email = "com_rizasarraf@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Rıza Sarraf",
                            LockoutEnabled = false,
                            NormalizedEmail = "COM_RIZASARRAF@LUMEN.COM",
                            NormalizedUserName = "COM_RIZASARRAF@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP6RPi0H/ku/IPxx1/PaV4v50IuX+7U5k3+hEFLMzw4prbE1maZa9fG22pe/dVH12A==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c10c81f8-81c2-415c-92ae-a5261f3dc93b",
                            TwoFactorEnabled = false,
                            UserName = "com_rizasarraf@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("a18dc8f2-defd-4233-9a37-8d12564e00bc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22b827dd-52fd-43f8-837c-02841c8cc410",
                            Email = "com_alialtinkafa@lumen.com",
                            EmailConfirmed = true,
                            FullName = "Ali Altınkafa",
                            LockoutEnabled = false,
                            NormalizedEmail = "COM_ALIALTINKAFA@LUMEN.COM",
                            NormalizedUserName = "COM_ALIALTINKAFA@LUMEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFASQxSfSS7IqhHnby2wsZ1og6hUE1HOH8mOjk3QhMLC4LO94ZI9HOxnnaePYU3fFg==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2606b4ca-a0d0-4889-a391-311f874f1202",
                            TwoFactorEnabled = false,
                            UserName = "com_alialtinkafa@lumen.com"
                        },
                        new
                        {
                            Id = new Guid("e6def87b-c734-4a10-a0be-ced4a542d54c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b1f0bbb-1217-4401-9df7-dea9ea114316",
                            Email = "mami22cetin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Fatma Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAMI22CETIN@GMAIL.COM",
                            NormalizedUserName = "MAMI22CETIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPubfuJdXlyYY3MKOMMOnoR2yGU95rVf778oEoU3xKTpfepD4bcCof6/1BLRM50UEQ==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "90bd0d73-f9bb-480c-a4e9-a4cc64bcf26f",
                            TwoFactorEnabled = false,
                            UserName = "mami22cetin@gmail.com"
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("16ea936c-7a28-4c30-86a2-9a9704b6115e")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("46c31bb2-9d7c-4424-9cc2-84892b055c43")
                        },
                        new
                        {
                            UserId = new Guid("5f3ed54b-6c06-4a22-b2e1-badd8e0d285b"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        },
                        new
                        {
                            UserId = new Guid("a18dc8f2-defd-4233-9a37-8d12564e00bc"),
                            RoleId = new Guid("7cb750cf-3612-4fb4-9f7d-a38ba8f16bf4")
                        },
                        new
                        {
                            UserId = new Guid("e6def87b-c734-4a10-a0be-ced4a542d54c"),
                            RoleId = new Guid("edf6c246-41d8-475f-8d92-41dddac3aefb")
                        });
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CompanyApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManagerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CompanyApplications");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRoleClaim", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserClaim", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserLogin", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserRole", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUserToken", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.CustomerAddress", b =>
                {
                    b.HasOne("CetinFarshidfar.JewelryECommerce.EntityLayer.Entitites.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });
#pragma warning restore 612, 618
        }
    }
}
