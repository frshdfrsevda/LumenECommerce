@using CetinFarshidfar.JewelryECommerce.EntityLayer.VMs.Products
@model ProductWithCategoryAndImagesVM
@{
    var images = Model.Images.OrderBy(i=>i.Queue).ToList();
    var firstImage = images.FirstOrDefault();
    var thumbnailIndex = 0;
    var listPrice = Model.DiscountPercentage == null ? Model.Price : Model.Price - (Model.Price * Model.DiscountPercentage / 100);
    var stockStatus = Model.SpecialProduction ? "Özel Üretim" : $"{Model.StockQuantity}";
    var title = $"<b>{Model.Company.Name}</b> {Model.ProductCode} {Model.Name}";
}
@{
    ViewData["Title"] = "Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles{
    <style>
        .card-title {
            font-size: 1.1rem;
            font-weight: bold;
        }

        .card-text {
            font-size: 0.9rem;
        }
        /* Slider container */
        .slider-container {
            display: inline-flex;
            align-items: center;
            gap: 20px;
            border:1px solid rgb(207,207,207);
            border-radius:15px;
            padding:2em 1em;
        }

        /* Sol sütun: Thumbnail alanı */
        .slider-thumbnails {
            display: flex;
            flex-direction: column;
            gap: 10px;
            background: linear-gradient(to bottom right, rgb(227,227,227), rgb(257,257,257));
            padding:0 .5em;
        }

            .slider-thumbnails img {
                width: 70px;
                height: 70px;
                cursor: pointer;
                object-fit: cover;
                border: 2px solid transparent;
                transition: border-color 0.3s;
            }

                .slider-thumbnails img.active {
                    border-color: #007BFF; /* Aktif olan resim için çerçeve */
                }

        .slider-large{
            border-radius:10px;
            background: linear-gradient(to bottom, rgb(257,257,257), rgb(227,227,227), rgb(257,257,257));
        }
        /* Sağ sütun: Büyük resim alanı */
        .slider-large img {
            width: 400px; /* Büyük resim genişliği */
            height: 530px;
            object-fit: contain;
        }

    </style>
}
<div class="container">
    <div class="slider-container">
        <div class="slider-thumbnails">
            <!-- Küçük resimler -->
            @foreach (var img in images)
            {
                <img src="@img.Path" alt="@Model.Name" class="thumbnail" data-index="@thumbnailIndex" />
                thumbnailIndex++;
            }
        </div>
        <div class="slider-large">
            <!-- Büyük resim -->
            <img src="@firstImage.Path" alt="@Model.Name" id="largeImage" />
        </div>
    </div>
    <div class="card-body d-inline-block">
        <h5 class="card-title text-wrap" title="@title">@Html.Raw(title)</h5>
        <p class="card-text">
            <span class="badge bg-secondary">@Model.Category.Name</span>
        </p>
        <p class="card-text">
            <strong>Fiyat: </strong>
            <span class="text-primary">@listPrice.Value.ToString("F2") ₺</span>
        </p>
        <p class="card-text mb-4">
            <strong>Stok: </strong>
            <span>@stockStatus</span>
        </p>
        <a href="/Cart/Add/@Model.Id" class="btn btn-primary w-50 offset-8">Sepete Ekle</a>
    </div>
</div>

@section Scripts{
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const thumbnails = document.querySelectorAll(".thumbnail");
            const largeImage = document.getElementById("largeImage");
            let currentIndex = 0;
            let interval;

            // Thumbnail'a tıklanma olayını ekleme
            thumbnails.forEach((thumbnail, index) => {
                thumbnail.addEventListener("click", () => {
                    currentIndex = index;
                    updateSlider();
                    resetSliderInterval();
                });
            });

            // Slider'ı güncelleme fonksiyonu
            function updateSlider() {
                // Büyük resmi güncelle
                largeImage.src = thumbnails[currentIndex].src;

                // Aktif sınıfını yönet
                thumbnails.forEach((thumbnail) => thumbnail.classList.remove("active"));
                thumbnails[currentIndex].classList.add("active");
            }

            // Slider'ı otomatik döndürme
            function startSliderInterval() {
                interval = setInterval(() => {
                    currentIndex = (currentIndex + 1) % thumbnails.length;
                    updateSlider();
                }, 3000); // 3 saniyede bir değişim
            }

            // Slider aralığını sıfırla
            function resetSliderInterval() {
                clearInterval(interval);
                startSliderInterval();
            }

            // Başlangıçta slider'ı başlat
            updateSlider();
            startSliderInterval();
        });

    </script>
}

