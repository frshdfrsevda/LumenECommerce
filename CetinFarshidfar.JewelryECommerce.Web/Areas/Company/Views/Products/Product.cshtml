@using CetinFarshidfar.JewelryECommerce.Web.Areas.Company.Models
@model IdAndNameModel
@{
    ViewData["Title"] = "Product";
    Layout = "~/Areas/Company/Views/Shared/_Layout.cshtml";
    var generalSettingsUrl = $"/Company/Products/ProductGeneralSettings?productId={Model.Id}";
    var photoSettingsUrl = $"/Company/Products/ProductPhotoSettings?productId={Model.Id}";
    var tagSettingsUrl = $"/Company/Products/ProductTagSettings?productId={Model.Id}";
}
@section Styles {
    <link rel="stylesheet" href="~/company/css/product_slider.css" asp-append-version="true"/>
}
<h1><a asp-area="Company" asp-controller="Products" asp-action="Index">Ürünler</a> <i class="fa fa-right-long px-3"></i> @Model.Name</h1>
<div class="bar">
    <button class="bar-btn selected" data-url="@generalSettingsUrl"><i class="fa fa-gear px-2"></i>Genel</button>
    <button class="bar-btn" data-url="@photoSettingsUrl"><i class="fa fa-images px-2"></i>Fotoğraflar</button>
    <button class="bar-btn" data-url="@tagSettingsUrl"><i class="fa fa-tags px-2"></i>Özellikler</button>
</div>

<div id="ajaxResponseMessage">
    <!-- Spinner elementi -->
    <div id="loadingSpinner" style="display: none;">
        <img src="https://i.imgur.com/JfPpwOA.gif" alt="Loading...">
    </div>
</div>
<div id="resultContent">
    @await Component.InvokeAsync("ProductGeneralSettingsArea",Model.Id)
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Kategorileri yükle
            $.ajax({
                url: '/Company/Products/GetCategories',
                type: 'GET',
                success: function (data) {
                    const categories = JSON.parse(data);
                    populateSelectList(categories, $('#categorySelect'), 0);
                    console.log("element = "+$('#categorySelect'));
                },
                error: function () {
                    alert("Kategoriler yüklenirken bir hata oluştu!");
                }
            });

            // Select list oluşturma fonksiyonu
            function populateSelectList(categories, selectElement, level) {
                categories.forEach(category => {
                    const indentation = '--'.repeat(level); // Hiyerarşiyi göstermek için girinti
                    var selectedCategoryId = $('#selectedCategoryId').val();
                    if(selectedCategoryId === category.Id){
                        selectElement.append(`<option value="${category.Id}" selected>${indentation} ${category.Name}</option>`);
                    }else{
                        selectElement.append(`<option value="${category.Id}">${indentation} ${category.Name}</option>`);
                    }

                    // Alt kategoriler varsa, onları da ekle
                    if (category.ChildCategories && category.ChildCategories.length > 0) {
                        populateSelectList(category.ChildCategories, selectElement, level + 1);
                    }
                });
            }
        });
    </script>
    <script src="~/company/js/product_slider.js" asp-append-version="true"></script>
    <script src="~/company/js/product_image.js" asp-append-version="true"></script>
    <script src="~/company/js/product_tag.js" asp-append-version="true"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}